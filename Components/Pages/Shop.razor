@page "/shop"
@using MaillotStore.Components
@using MaillotStore.Components.Sections
@using MaillotStore.Data
@using MaillotStore.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext

<div class="shop-page-container">

    <HomePageSearchBar />

    <div class="container mt-5 pt-5">

        @* This is your original header structure, untouched *@
        <div class="full-width-section shop-header-container">
            <div class="container d-flex justify-content-between align-items-center py-4">
                <h2 class="text-white">All Products</h2>
                <div class="d-flex">
                    <div class="dropdown me-3">
                        <button class="btn btn-dark dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Sort by
                        </button>
                        <ul class="dropdown-menu dropdown-menu-dark">
                            <li><a class="dropdown-item" href="#">Name (A-Z)</a></li>
                            <li><a class="dropdown-item" href="#">Price (Low to High)</a></li>
                            <li><a class="dropdown-item" href="#">Price (High to Low)</a></li>
                        </ul>
                    </div>
                    <button class="btn btn-dark">Filter</button>
                </div>
            </div>
        </div>

        @* This is your original product container structure, now made dynamic *@
        <div class="full-width-section featured-jerseys-container" style="margin-top: 0px;">
            <div class="container py-5">
                <div class="row">
                    @if (_products == null)
                    {
                        <p class="text-white"><em>Loading products...</em></p>
                    }
                    else
                    {
                        @foreach (var product in _products)
                        {
                            <ProductCard Product="product" />
                        }
                    }
                </div>

                @* Your original pagination, untouched *@
                <nav aria-label="Product page navigation" class="d-flex justify-content-center mt-5 mb-5">
                    <ul class="pagination">
                        <li class="page-item"><a class="page-link" href="#">Previous</a></li>
                        <li class="page-item"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                        <li class="page-item"><a class="page-link" href="#">Next</a></li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<Footer />

@code {
    private List<Product> _products;

    protected override async Task OnInitializedAsync()
    {
        _products = await DbContext.Products.ToListAsync();
    }
}