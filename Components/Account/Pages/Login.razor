@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MaillotStore.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<StatusMessage Message="@errorMessage" />
<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText @bind-Value="Input.Email" id="email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <ValidationMessage For="() => Input.Email" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText type="password" @bind-Value="Input.Password" id="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
        <ValidationMessage For="() => Input.Password" class="text-danger" />
    </div>
    <div class="mb-3 form-check">
        <InputCheckbox @bind-Value="Input.RememberMe" id="remember-me" class="form-check-input" />
        <label class="form-check-label" for="remember-me">Remember me</label>
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
</EditForm>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        errorMessage = null;
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null)
            {
                if (await UserManager.IsInRoleAsync(user, "Admin"))
                {
                    RedirectManager.RedirectTo("/admin/dashboard");
                    return;
                }
                if (await UserManager.IsInRoleAsync(user, "Influencer"))
                {
                    RedirectManager.RedirectTo("/influencer-dashboard");
                    return;
                }
            }
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}